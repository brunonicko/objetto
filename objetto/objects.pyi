from typing import Any, Callable, Iterable, Optional, Tuple, Type, TypeVar, Union

from ._applications import Action as Action
from ._data import DataRelationship
from ._history import HistoryObject
from ._objects import Attribute as Attribute
from ._objects import AttributeMeta as AttributeMeta
from ._objects import BaseReaction
from ._objects import DictObject as DictObject
from ._objects import DictObjectMeta as DictObjectMeta
from ._objects import ListObject as ListObject
from ._objects import ListObjectMeta as ListObjectMeta
from ._objects import MutableDictObject as MutableDictObject
from ._objects import MutableListObject as MutableListObject
from ._objects import MutableSetObject as MutableSetObject
from ._objects import Object as Object
from ._objects import ObjectMeta as ObjectMeta
from ._objects import ProxyDictObject as ProxyDictObject
from ._objects import ProxyListObject as ProxyListObject
from ._objects import ProxySetObject as ProxySetObject
from ._objects import Relationship as Relationship
from ._objects import SetObject as SetObject
from ._objects import SetObjectMeta as SetObjectMeta
from ._structures import KeyRelationship as KeyRelationship
from ._structures import unique_descriptor as unique_descriptor
from .utils.factoring import LazyFactory
from .utils.type_checking import LazyTypes

ReactionType = Union[LazyFactory, BaseReaction]
ReactionsType = Union[ReactionType, Iterable[ReactionType]]
T = TypeVar("T")
RT = TypeVar("RT")
KT = TypeVar("KT")
VT = TypeVar("VT")
NT = Union[Type[None], None]

def data_method(func: Callable[..., RT]) -> Callable[..., RT]: ...
def data_relationship(
    types: LazyTypes = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
) -> DataRelationship: ...
def history_descriptor(size: Optional[int] = ...) -> HistoryObject: ...
def attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: Optional[bool] = ...,
    deletable: Optional[bool] = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    delegated: bool = ...,
    dependencies: Optional[Union[Iterable[Attribute], Attribute]] = ...,
    deserialize_to: Optional[Attribute] = ...,
    batch_name: Optional[str] = ...,
) -> T: ...
def constant_attribute(
    value: T,
    subtypes: bool = ...,
    checked: bool = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    data: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
) -> T: ...
def protected_attribute_pair(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    changeable: Optional[bool] = ...,
    deletable: Optional[bool] = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    protected_metadata: Any = ...,
    batch_name: Optional[str] = ...,
) -> Tuple[T, T]: ...
def dict_attribute(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
) -> MutableDictObject[KT, VT]: ...
def protected_dict_attribute(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
) -> DictObject[KT, VT]: ...
def protected_dict_attribute_pair(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    protected_metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
) -> Tuple[ProxyDictObject[KT, VT], DictObject[KT, VT]]: ...
def list_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_insert_name: Optional[str] = ...,
    batch_delete_name: Optional[str] = ...,
    batch_update_name: Optional[str] = ...,
    batch_move_name: Optional[str] = ...,
) -> MutableListObject[T]: ...
def protected_list_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_insert_name: Optional[str] = ...,
    batch_delete_name: Optional[str] = ...,
    batch_update_name: Optional[str] = ...,
    batch_move_name: Optional[str] = ...,
) -> ListObject[T]: ...
def protected_list_attribute_pair(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    protected_metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_insert_name: Optional[str] = ...,
    batch_delete_name: Optional[str] = ...,
    batch_update_name: Optional[str] = ...,
    batch_move_name: Optional[str] = ...,
) -> Tuple[ProxyListObject[T], ListObject[T]]: ...
def set_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
    batch_remove_name: Optional[str] = ...,
) -> MutableSetObject[T]: ...
def protected_set_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
    batch_remove_name: Optional[str] = ...,
) -> SetObject[T]: ...
def protected_set_attribute_pair(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    protected_metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
    batch_remove_name: Optional[str] = ...,
) -> Tuple[ProxySetObject[T], SetObject[T]]: ...
def dict_cls(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
) -> Type[MutableDictObject[KT, VT]]: ...
def protected_dict_cls(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
) -> Type[DictObject[KT, VT]]: ...
def list_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_insert_name: Optional[str] = ...,
    batch_delete_name: Optional[str] = ...,
    batch_update_name: Optional[str] = ...,
    batch_move_name: Optional[str] = ...,
) -> Type[MutableListObject[T]]: ...
def protected_list_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_insert_name: Optional[str] = ...,
    batch_delete_name: Optional[str] = ...,
    batch_update_name: Optional[str] = ...,
    batch_move_name: Optional[str] = ...,
) -> Type[ListObject[T]]: ...
def set_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
    batch_remove_name: Optional[str] = ...,
) -> Type[MutableSetObject[T]]: ...
def protected_set_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: Optional[bool] = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    child: bool = ...,
    history: Optional[bool] = ...,
    data: Optional[bool] = ...,
    custom_data_relationship: Optional[DataRelationship] = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
    reactions: ReactionsType = ...,
    batch_update_name: Optional[str] = ...,
    batch_remove_name: Optional[str] = ...,
) -> Type[SetObject[T]]: ...
