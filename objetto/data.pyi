from typing import Any, Iterable, Optional, Type, TypeVar, Union

from ._data import Data as Data
from ._data import DataAttribute as DataAttribute
from ._data import DataAttributeMeta as DataAttributeMeta
from ._data import DataMeta as DataMeta
from ._data import DataRelationship as DataRelationship
from ._data import DictData as DictData
from ._data import DictDataMeta as DictDataMeta
from ._data import InteractiveData as InteractiveData
from ._data import InteractiveDictData as InteractiveDictData
from ._data import InteractiveListData as InteractiveListData
from ._data import InteractiveSetData as InteractiveSetData
from ._data import ListData as ListData
from ._data import ListDataMeta as ListDataMeta
from ._data import SetData as SetData
from ._data import SetDataMeta as SetDataMeta
from ._structures import unique_descriptor as unique_descriptor
from .utils.factoring import LazyFactory

T = TypeVar("T")
KT = TypeVar("KT")
VT = TypeVar("VT")
NT = Union[Type[None], None]

def data_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
) -> T: ...
def data_constant_attribute(
    value: T,
    subtypes: bool = ...,
    checked: bool = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
) -> T: ...
def data_dict_attribute(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> InteractiveDictData[KT, VT]: ...
def data_protected_dict_attribute(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> DictData[KT, VT]: ...
def data_list_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> InteractiveListData[T]: ...
def data_protected_list_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> ListData[T]: ...
def data_set_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> InteractiveSetData[T]: ...
def data_protected_set_attribute(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    default: Any = ...,
    default_factory: LazyFactory = ...,
    required: bool = ...,
    changeable: bool = ...,
    deletable: bool = ...,
    finalized: bool = ...,
    abstracted: bool = ...,
    metadata: Any = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> SetData[T]: ...
def data_dict_cls(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> Type[InteractiveDictData[KT, VT]]: ...
def data_protected_dict_cls(
    types: Union[Type[VT], NT, str, Iterable[Union[Type[VT], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    key_types: Union[Type[KT], NT, str, Iterable[Union[Type[KT], NT, str]]] = ...,
    key_subtypes: bool = ...,
    key_factory: LazyFactory = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> Type[DictData[KT, VT]]: ...
def data_list_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> Type[InteractiveListData[T]]: ...
def data_protected_list_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> Type[ListData[T]]: ...
def data_set_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> Type[InteractiveSetData[T]]: ...
def data_protected_set_cls(
    types: Union[Type[T], NT, str, Iterable[Union[Type[T], NT, str]]] = ...,
    subtypes: bool = ...,
    checked: Optional[bool] = ...,
    module: Optional[str] = ...,
    factory: LazyFactory = ...,
    serialized: bool = ...,
    serializer: LazyFactory = ...,
    deserializer: LazyFactory = ...,
    represented: bool = ...,
    compared: bool = ...,
    qual_name: Optional[str] = ...,
    unique: bool = ...,
) -> Type[SetData[T]]: ...
